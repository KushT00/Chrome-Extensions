{"ast":null,"code":"import React,{useState,useEffect}from'react';import{DndProvider}from'react-dnd';import{HTML5Backend}from'react-dnd-html5-backend';import Column from'./Column';import'./styles.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[columns,setColumns]=useState(()=>{const savedColumns=localStorage.getItem('columns');return savedColumns?JSON.parse(savedColumns):{todo:{name:'To Do',items:[{id:'1',content:'Task 1',color:'#FFCDD2'},{id:'2',content:'Task 2',color:'#BBDEFB'}]},ongoing:{name:'Ongoing',items:[]},completed:{name:'Completed',items:[]}};});const colors=['#FFCDD2','#F8BBD0','#E1BEE7','#D1C4E9','#C5CAE9','#BBDEFB','#B3E5FC','#B2EBF2','#B2DFDB','#C8E6C9','#DCEDC8','#F0F4C3','#FFF9C4'];// Save columns to local storage when columns state changes\nuseEffect(()=>{localStorage.setItem('columns',JSON.stringify(columns));},[columns]);const moveTask=(taskId,sourceColumnId,destinationColumnId,destinationIndex)=>{const sourceColumn=columns[sourceColumnId];const destColumn=columns[destinationColumnId];const taskToMove=sourceColumn.items.find(item=>item.id===taskId);const updatedSourceItems=sourceColumn.items.filter(item=>item.id!==taskId);if(sourceColumnId===destinationColumnId){const reorderedItems=[...updatedSourceItems];reorderedItems.splice(destinationIndex,0,taskToMove);setColumns(prevColumns=>({...prevColumns,[sourceColumnId]:{...sourceColumn,items:reorderedItems}}));}else{const updatedDestItems=[...destColumn.items,taskToMove];setColumns(prevColumns=>({...prevColumns,[sourceColumnId]:{...sourceColumn,items:updatedSourceItems},[destinationColumnId]:{...destColumn,items:updatedDestItems}}));}};const addTask=columnId=>{const taskContent=prompt(\"Enter task content:\");if(taskContent){const colorIndex=Math.floor(Math.random()*colors.length);// Pick a random color\nconst newTask={id:Date.now().toString(),content:taskContent,color:colors[colorIndex]};setColumns(prevColumns=>{const updatedColumn={...prevColumns[columnId],items:[...prevColumns[columnId].items,newTask]};return{...prevColumns,[columnId]:updatedColumn};});}};const addColumn=()=>{const columnName=prompt(\"Enter new column name:\");if(columnName){const newColumnId=`column_${Date.now()}`;setColumns(prevColumns=>({...prevColumns,[newColumnId]:{name:columnName,items:[]}}));}};const deleteColumn=columnId=>{setColumns(prevColumns=>{const newColumns={...prevColumns};delete newColumns[columnId];return newColumns;});};const deleteTask=(columnId,taskId)=>{setColumns(prevColumns=>{const updatedColumn={...prevColumns[columnId],items:prevColumns[columnId].items.filter(task=>task.id!==taskId)};return{...prevColumns,[columnId]:updatedColumn};});};return/*#__PURE__*/_jsx(DndProvider,{backend:HTML5Backend,children:/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Pixy Board\"}),/*#__PURE__*/_jsx(\"button\",{onClick:addColumn,children:\"Add Column\"}),/*#__PURE__*/_jsx(\"div\",{className:\"kanban-board-wrapper\",children:/*#__PURE__*/_jsx(\"div\",{className:\"kanban-board\",children:Object.entries(columns).map(_ref=>{let[columnId,column]=_ref;return/*#__PURE__*/_jsx(Column,{columnId:columnId,column:column,moveTask:moveTask,addTask:addTask,deleteColumn:deleteColumn,deleteTask:deleteTask},columnId);})})})]})});}export default App;","map":{"version":3,"names":["React","useState","useEffect","DndProvider","HTML5Backend","Column","jsx","_jsx","jsxs","_jsxs","App","columns","setColumns","savedColumns","localStorage","getItem","JSON","parse","todo","name","items","id","content","color","ongoing","completed","colors","setItem","stringify","moveTask","taskId","sourceColumnId","destinationColumnId","destinationIndex","sourceColumn","destColumn","taskToMove","find","item","updatedSourceItems","filter","reorderedItems","splice","prevColumns","updatedDestItems","addTask","columnId","taskContent","prompt","colorIndex","Math","floor","random","length","newTask","Date","now","toString","updatedColumn","addColumn","columnName","newColumnId","deleteColumn","newColumns","deleteTask","task","backend","children","className","onClick","Object","entries","map","_ref","column"],"sources":["C:/Users/Dell/OneDrive/Documents/Extensions/kanban-board/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport Column from './Column';\nimport './styles.css';\n\nfunction App() {\n    const [columns, setColumns] = useState(() => {\n        const savedColumns = localStorage.getItem('columns');\n        return savedColumns ? JSON.parse(savedColumns) : {\n            todo: {\n                name: 'To Do',\n                items: [{ id: '1', content: 'Task 1', color: '#FFCDD2' }, { id: '2', content: 'Task 2', color: '#BBDEFB' }],\n            },\n            ongoing: {\n                name: 'Ongoing',\n                items: [],\n            },\n            completed: {\n                name: 'Completed',\n                items: [],\n            },\n        };\n    });\n\n    const colors = ['#FFCDD2', '#F8BBD0', '#E1BEE7', '#D1C4E9', '#C5CAE9', '#BBDEFB', '#B3E5FC', '#B2EBF2', '#B2DFDB', '#C8E6C9', '#DCEDC8', '#F0F4C3', '#FFF9C4'];\n\n    // Save columns to local storage when columns state changes\n    useEffect(() => {\n        localStorage.setItem('columns', JSON.stringify(columns));\n    }, [columns]);\n\n    const moveTask = (taskId, sourceColumnId, destinationColumnId, destinationIndex) => {\n        const sourceColumn = columns[sourceColumnId];\n        const destColumn = columns[destinationColumnId];\n\n        const taskToMove = sourceColumn.items.find((item) => item.id === taskId);\n        const updatedSourceItems = sourceColumn.items.filter((item) => item.id !== taskId);\n\n        if (sourceColumnId === destinationColumnId) {\n            const reorderedItems = [...updatedSourceItems];\n            reorderedItems.splice(destinationIndex, 0, taskToMove);\n            setColumns((prevColumns) => ({\n                ...prevColumns,\n                [sourceColumnId]: {\n                    ...sourceColumn,\n                    items: reorderedItems,\n                },\n            }));\n        } else {\n            const updatedDestItems = [...destColumn.items, taskToMove];\n            setColumns((prevColumns) => ({\n                ...prevColumns,\n                [sourceColumnId]: {\n                    ...sourceColumn,\n                    items: updatedSourceItems,\n                },\n                [destinationColumnId]: {\n                    ...destColumn,\n                    items: updatedDestItems,\n                },\n            }));\n        }\n    };\n\n    const addTask = (columnId) => {\n        const taskContent = prompt(\"Enter task content:\");\n        if (taskContent) {\n            const colorIndex = Math.floor(Math.random() * colors.length);  // Pick a random color\n            const newTask = { id: Date.now().toString(), content: taskContent, color: colors[colorIndex] };\n            setColumns((prevColumns) => {\n                const updatedColumn = {\n                    ...prevColumns[columnId],\n                    items: [...prevColumns[columnId].items, newTask],\n                };\n                return { ...prevColumns, [columnId]: updatedColumn };\n            });\n        }\n    };\n\n    const addColumn = () => {\n        const columnName = prompt(\"Enter new column name:\");\n        if (columnName) {\n            const newColumnId = `column_${Date.now()}`;\n            setColumns((prevColumns) => ({\n                ...prevColumns,\n                [newColumnId]: { name: columnName, items: [] },\n            }));\n        }\n    };\n\n    const deleteColumn = (columnId) => {\n        setColumns((prevColumns) => {\n            const newColumns = { ...prevColumns };\n            delete newColumns[columnId];\n            return newColumns;\n        });\n    };\n\n    const deleteTask = (columnId, taskId) => {\n        setColumns((prevColumns) => {\n            const updatedColumn = {\n                ...prevColumns[columnId],\n                items: prevColumns[columnId].items.filter((task) => task.id !== taskId),\n            };\n            return { ...prevColumns, [columnId]: updatedColumn };\n        });\n    };\n\n    return (\n        <DndProvider backend={HTML5Backend}>\n            <div className=\"App\">\n                <h1>Pixy Board</h1>\n                <button onClick={addColumn}>Add Column</button>\n\n                <div className=\"kanban-board-wrapper\">\n                    <div className=\"kanban-board\">\n                        {Object.entries(columns).map(([columnId, column]) => (\n                            <Column \n                                key={columnId} \n                                columnId={columnId} \n                                column={column} \n                                moveTask={moveTask} \n                                addTask={addTask} \n                                deleteColumn={deleteColumn} \n                                deleteTask={deleteTask} \n                            />\n                        ))}\n                    </div>\n                </div>\n            </div>\n        </DndProvider>\n    );\n}\n\nexport default App;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAClD,OAASC,WAAW,KAAQ,WAAW,CACvC,OAASC,YAAY,KAAQ,yBAAyB,CACtD,MAAO,CAAAC,MAAM,KAAM,UAAU,CAC7B,MAAO,cAAc,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEtB,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACX,KAAM,CAACC,OAAO,CAAEC,UAAU,CAAC,CAAGX,QAAQ,CAAC,IAAM,CACzC,KAAM,CAAAY,YAAY,CAAGC,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC,CACpD,MAAO,CAAAF,YAAY,CAAGG,IAAI,CAACC,KAAK,CAACJ,YAAY,CAAC,CAAG,CAC7CK,IAAI,CAAE,CACFC,IAAI,CAAE,OAAO,CACbC,KAAK,CAAE,CAAC,CAAEC,EAAE,CAAE,GAAG,CAAEC,OAAO,CAAE,QAAQ,CAAEC,KAAK,CAAE,SAAU,CAAC,CAAE,CAAEF,EAAE,CAAE,GAAG,CAAEC,OAAO,CAAE,QAAQ,CAAEC,KAAK,CAAE,SAAU,CAAC,CAC9G,CAAC,CACDC,OAAO,CAAE,CACLL,IAAI,CAAE,SAAS,CACfC,KAAK,CAAE,EACX,CAAC,CACDK,SAAS,CAAE,CACPN,IAAI,CAAE,WAAW,CACjBC,KAAK,CAAE,EACX,CACJ,CAAC,CACL,CAAC,CAAC,CAEF,KAAM,CAAAM,MAAM,CAAG,CAAC,SAAS,CAAE,SAAS,CAAE,SAAS,CAAE,SAAS,CAAE,SAAS,CAAE,SAAS,CAAE,SAAS,CAAE,SAAS,CAAE,SAAS,CAAE,SAAS,CAAE,SAAS,CAAE,SAAS,CAAE,SAAS,CAAC,CAE9J;AACAxB,SAAS,CAAC,IAAM,CACZY,YAAY,CAACa,OAAO,CAAC,SAAS,CAAEX,IAAI,CAACY,SAAS,CAACjB,OAAO,CAAC,CAAC,CAC5D,CAAC,CAAE,CAACA,OAAO,CAAC,CAAC,CAEb,KAAM,CAAAkB,QAAQ,CAAGA,CAACC,MAAM,CAAEC,cAAc,CAAEC,mBAAmB,CAAEC,gBAAgB,GAAK,CAChF,KAAM,CAAAC,YAAY,CAAGvB,OAAO,CAACoB,cAAc,CAAC,CAC5C,KAAM,CAAAI,UAAU,CAAGxB,OAAO,CAACqB,mBAAmB,CAAC,CAE/C,KAAM,CAAAI,UAAU,CAAGF,YAAY,CAACd,KAAK,CAACiB,IAAI,CAAEC,IAAI,EAAKA,IAAI,CAACjB,EAAE,GAAKS,MAAM,CAAC,CACxE,KAAM,CAAAS,kBAAkB,CAAGL,YAAY,CAACd,KAAK,CAACoB,MAAM,CAAEF,IAAI,EAAKA,IAAI,CAACjB,EAAE,GAAKS,MAAM,CAAC,CAElF,GAAIC,cAAc,GAAKC,mBAAmB,CAAE,CACxC,KAAM,CAAAS,cAAc,CAAG,CAAC,GAAGF,kBAAkB,CAAC,CAC9CE,cAAc,CAACC,MAAM,CAACT,gBAAgB,CAAE,CAAC,CAAEG,UAAU,CAAC,CACtDxB,UAAU,CAAE+B,WAAW,GAAM,CACzB,GAAGA,WAAW,CACd,CAACZ,cAAc,EAAG,CACd,GAAGG,YAAY,CACfd,KAAK,CAAEqB,cACX,CACJ,CAAC,CAAC,CAAC,CACP,CAAC,IAAM,CACH,KAAM,CAAAG,gBAAgB,CAAG,CAAC,GAAGT,UAAU,CAACf,KAAK,CAAEgB,UAAU,CAAC,CAC1DxB,UAAU,CAAE+B,WAAW,GAAM,CACzB,GAAGA,WAAW,CACd,CAACZ,cAAc,EAAG,CACd,GAAGG,YAAY,CACfd,KAAK,CAAEmB,kBACX,CAAC,CACD,CAACP,mBAAmB,EAAG,CACnB,GAAGG,UAAU,CACbf,KAAK,CAAEwB,gBACX,CACJ,CAAC,CAAC,CAAC,CACP,CACJ,CAAC,CAED,KAAM,CAAAC,OAAO,CAAIC,QAAQ,EAAK,CAC1B,KAAM,CAAAC,WAAW,CAAGC,MAAM,CAAC,qBAAqB,CAAC,CACjD,GAAID,WAAW,CAAE,CACb,KAAM,CAAAE,UAAU,CAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG1B,MAAM,CAAC2B,MAAM,CAAC,CAAG;AAC/D,KAAM,CAAAC,OAAO,CAAG,CAAEjC,EAAE,CAAEkC,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAEnC,OAAO,CAAEyB,WAAW,CAAExB,KAAK,CAAEG,MAAM,CAACuB,UAAU,CAAE,CAAC,CAC9FrC,UAAU,CAAE+B,WAAW,EAAK,CACxB,KAAM,CAAAe,aAAa,CAAG,CAClB,GAAGf,WAAW,CAACG,QAAQ,CAAC,CACxB1B,KAAK,CAAE,CAAC,GAAGuB,WAAW,CAACG,QAAQ,CAAC,CAAC1B,KAAK,CAAEkC,OAAO,CACnD,CAAC,CACD,MAAO,CAAE,GAAGX,WAAW,CAAE,CAACG,QAAQ,EAAGY,aAAc,CAAC,CACxD,CAAC,CAAC,CACN,CACJ,CAAC,CAED,KAAM,CAAAC,SAAS,CAAGA,CAAA,GAAM,CACpB,KAAM,CAAAC,UAAU,CAAGZ,MAAM,CAAC,wBAAwB,CAAC,CACnD,GAAIY,UAAU,CAAE,CACZ,KAAM,CAAAC,WAAW,CAAG,UAAUN,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,CAC1C5C,UAAU,CAAE+B,WAAW,GAAM,CACzB,GAAGA,WAAW,CACd,CAACkB,WAAW,EAAG,CAAE1C,IAAI,CAAEyC,UAAU,CAAExC,KAAK,CAAE,EAAG,CACjD,CAAC,CAAC,CAAC,CACP,CACJ,CAAC,CAED,KAAM,CAAA0C,YAAY,CAAIhB,QAAQ,EAAK,CAC/BlC,UAAU,CAAE+B,WAAW,EAAK,CACxB,KAAM,CAAAoB,UAAU,CAAG,CAAE,GAAGpB,WAAY,CAAC,CACrC,MAAO,CAAAoB,UAAU,CAACjB,QAAQ,CAAC,CAC3B,MAAO,CAAAiB,UAAU,CACrB,CAAC,CAAC,CACN,CAAC,CAED,KAAM,CAAAC,UAAU,CAAGA,CAAClB,QAAQ,CAAEhB,MAAM,GAAK,CACrClB,UAAU,CAAE+B,WAAW,EAAK,CACxB,KAAM,CAAAe,aAAa,CAAG,CAClB,GAAGf,WAAW,CAACG,QAAQ,CAAC,CACxB1B,KAAK,CAAEuB,WAAW,CAACG,QAAQ,CAAC,CAAC1B,KAAK,CAACoB,MAAM,CAAEyB,IAAI,EAAKA,IAAI,CAAC5C,EAAE,GAAKS,MAAM,CAC1E,CAAC,CACD,MAAO,CAAE,GAAGa,WAAW,CAAE,CAACG,QAAQ,EAAGY,aAAc,CAAC,CACxD,CAAC,CAAC,CACN,CAAC,CAED,mBACInD,IAAA,CAACJ,WAAW,EAAC+D,OAAO,CAAE9D,YAAa,CAAA+D,QAAA,cAC/B1D,KAAA,QAAK2D,SAAS,CAAC,KAAK,CAAAD,QAAA,eAChB5D,IAAA,OAAA4D,QAAA,CAAI,YAAU,CAAI,CAAC,cACnB5D,IAAA,WAAQ8D,OAAO,CAAEV,SAAU,CAAAQ,QAAA,CAAC,YAAU,CAAQ,CAAC,cAE/C5D,IAAA,QAAK6D,SAAS,CAAC,sBAAsB,CAAAD,QAAA,cACjC5D,IAAA,QAAK6D,SAAS,CAAC,cAAc,CAAAD,QAAA,CACxBG,MAAM,CAACC,OAAO,CAAC5D,OAAO,CAAC,CAAC6D,GAAG,CAACC,IAAA,MAAC,CAAC3B,QAAQ,CAAE4B,MAAM,CAAC,CAAAD,IAAA,oBAC5ClE,IAAA,CAACF,MAAM,EAEHyC,QAAQ,CAAEA,QAAS,CACnB4B,MAAM,CAAEA,MAAO,CACf7C,QAAQ,CAAEA,QAAS,CACnBgB,OAAO,CAAEA,OAAQ,CACjBiB,YAAY,CAAEA,YAAa,CAC3BE,UAAU,CAAEA,UAAW,EANlBlB,QAOR,CAAC,EACL,CAAC,CACD,CAAC,CACL,CAAC,EACL,CAAC,CACG,CAAC,CAEtB,CAEA,cAAe,CAAApC,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
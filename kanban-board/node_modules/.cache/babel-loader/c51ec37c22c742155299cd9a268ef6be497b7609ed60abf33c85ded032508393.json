{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\OneDrive\\\\Documents\\\\Extensions\\\\kanban-board\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport Column from './Column';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [columns, setColumns] = useState(() => {\n    const savedColumns = localStorage.getItem('columns');\n    return savedColumns ? JSON.parse(savedColumns) : {\n      todo: {\n        name: 'To Do',\n        items: [{\n          id: '1',\n          content: 'Task 1'\n        }, {\n          id: '2',\n          content: 'Task 2'\n        }]\n      },\n      ongoing: {\n        name: 'Ongoing',\n        items: []\n      },\n      completed: {\n        name: 'Completed',\n        items: []\n      }\n    };\n  });\n  useEffect(() => {\n    localStorage.setItem('columns', JSON.stringify(columns));\n  }, [columns]);\n  const moveTask = (taskId, sourceColumnId, destinationColumnId, destinationIndex) => {\n    const sourceColumn = columns[sourceColumnId];\n    const destColumn = columns[destinationColumnId];\n    const taskToMove = sourceColumn.items.find(item => item.id === taskId);\n    const updatedSourceItems = sourceColumn.items.filter(item => item.id !== taskId);\n    if (sourceColumnId === destinationColumnId) {\n      // Moving within the same column\n      const reorderedItems = [...updatedSourceItems];\n      reorderedItems.splice(destinationIndex, 0, taskToMove);\n      setColumns(prevColumns => ({\n        ...prevColumns,\n        [sourceColumnId]: {\n          ...sourceColumn,\n          items: reorderedItems\n        }\n      }));\n    } else {\n      // Moving to a different column\n      const updatedDestItems = [...destColumn.items, taskToMove];\n      setColumns(prevColumns => ({\n        ...prevColumns,\n        [sourceColumnId]: {\n          ...sourceColumn,\n          items: updatedSourceItems\n        },\n        [destinationColumnId]: {\n          ...destColumn,\n          items: updatedDestItems\n        }\n      }));\n    }\n  };\n  const addTask = columnId => {\n    const taskContent = prompt(\"Enter task content:\");\n    if (taskContent) {\n      const newTask = {\n        id: Date.now().toString(),\n        content: taskContent\n      };\n      setColumns(prevColumns => {\n        const updatedColumn = {\n          ...prevColumns[columnId],\n          items: [...prevColumns[columnId].items, newTask]\n        };\n        return {\n          ...prevColumns,\n          [columnId]: updatedColumn\n        };\n      });\n    }\n  };\n  const addColumn = () => {\n    const columnName = prompt(\"Enter new column name:\");\n    if (columnName) {\n      const newColumnId = `column_${Date.now()}`;\n      setColumns(prevColumns => ({\n        ...prevColumns,\n        [newColumnId]: {\n          name: columnName,\n          items: []\n        }\n      }));\n    }\n  };\n  const deleteColumn = columnId => {\n    setColumns(prevColumns => {\n      const newColumns = {\n        ...prevColumns\n      };\n      delete newColumns[columnId];\n      return newColumns;\n    });\n  };\n\n  // New function to delete a specific task\n  const deleteTask = (columnId, taskId) => {\n    setColumns(prevColumns => {\n      const updatedColumn = {\n        ...prevColumns[columnId],\n        items: prevColumns[columnId].items.filter(task => task.id !== taskId)\n      };\n      return {\n        ...prevColumns,\n        [columnId]: updatedColumn\n      };\n    });\n  };\n\n  // Pagination logic\n  const [currentPage, setCurrentPage] = useState(0);\n  const columnsPerPage = 4;\n  const totalPages = Math.ceil(Object.keys(columns).length / columnsPerPage);\n  const handleNextPage = () => {\n    if (currentPage < totalPages - 1) {\n      setCurrentPage(currentPage + 1);\n    }\n  };\n  const handlePreviousPage = () => {\n    if (currentPage > 0) {\n      setCurrentPage(currentPage - 1);\n    }\n  };\n\n  // Get the columns to display on the current page\n  const displayedColumns = Object.entries(columns).slice(currentPage * columnsPerPage, (currentPage + 1) * columnsPerPage);\n  return /*#__PURE__*/_jsxDEV(DndProvider, {\n    backend: HTML5Backend,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Kanban Board\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addColumn,\n        children: \"Add Column\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"kanban-board\",\n        style: {\n          overflowX: 'auto'\n        },\n        children: displayedColumns.map(([columnId, column]) => /*#__PURE__*/_jsxDEV(Column, {\n          columnId: columnId,\n          column: column,\n          moveTask: moveTask,\n          addTask: addTask,\n          deleteColumn: deleteColumn,\n          deleteTask: deleteTask\n        }, columnId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pagination\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handlePreviousPage,\n          disabled: currentPage === 0,\n          children: \"Previous\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNextPage,\n          disabled: currentPage >= totalPages - 1,\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"nlg28PtO1XkpXnP0boWbEyKR90Q=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","DndProvider","HTML5Backend","Column","jsxDEV","_jsxDEV","App","_s","columns","setColumns","savedColumns","localStorage","getItem","JSON","parse","todo","name","items","id","content","ongoing","completed","setItem","stringify","moveTask","taskId","sourceColumnId","destinationColumnId","destinationIndex","sourceColumn","destColumn","taskToMove","find","item","updatedSourceItems","filter","reorderedItems","splice","prevColumns","updatedDestItems","addTask","columnId","taskContent","prompt","newTask","Date","now","toString","updatedColumn","addColumn","columnName","newColumnId","deleteColumn","newColumns","deleteTask","task","currentPage","setCurrentPage","columnsPerPage","totalPages","Math","ceil","Object","keys","length","handleNextPage","handlePreviousPage","displayedColumns","entries","slice","backend","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","overflowX","map","column","disabled","_c","$RefreshReg$"],"sources":["C:/Users/Dell/OneDrive/Documents/Extensions/kanban-board/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport Column from './Column';\nimport './styles.css';\n\nfunction App() {\n    const [columns, setColumns] = useState(() => {\n        const savedColumns = localStorage.getItem('columns');\n        return savedColumns ? JSON.parse(savedColumns) : {\n            todo: {\n                name: 'To Do',\n                items: [{ id: '1', content: 'Task 1' }, { id: '2', content: 'Task 2' }],\n            },\n            ongoing: {\n                name: 'Ongoing',\n                items: [],\n            },\n            completed: {\n                name: 'Completed',\n                items: [],\n            },\n        };\n    });\n\n    useEffect(() => {\n        localStorage.setItem('columns', JSON.stringify(columns));\n    }, [columns]);\n\n    const moveTask = (taskId, sourceColumnId, destinationColumnId, destinationIndex) => {\n        const sourceColumn = columns[sourceColumnId];\n        const destColumn = columns[destinationColumnId];\n\n        const taskToMove = sourceColumn.items.find((item) => item.id === taskId);\n        const updatedSourceItems = sourceColumn.items.filter((item) => item.id !== taskId);\n\n        if (sourceColumnId === destinationColumnId) {\n            // Moving within the same column\n            const reorderedItems = [...updatedSourceItems];\n            reorderedItems.splice(destinationIndex, 0, taskToMove);\n            setColumns((prevColumns) => ({\n                ...prevColumns,\n                [sourceColumnId]: {\n                    ...sourceColumn,\n                    items: reorderedItems,\n                },\n            }));\n        } else {\n            // Moving to a different column\n            const updatedDestItems = [...destColumn.items, taskToMove];\n            setColumns((prevColumns) => ({\n                ...prevColumns,\n                [sourceColumnId]: {\n                    ...sourceColumn,\n                    items: updatedSourceItems,\n                },\n                [destinationColumnId]: {\n                    ...destColumn,\n                    items: updatedDestItems,\n                },\n            }));\n        }\n    };\n\n    const addTask = (columnId) => {\n        const taskContent = prompt(\"Enter task content:\");\n        if (taskContent) {\n            const newTask = { id: Date.now().toString(), content: taskContent };\n            setColumns((prevColumns) => {\n                const updatedColumn = {\n                    ...prevColumns[columnId],\n                    items: [...prevColumns[columnId].items, newTask],\n                };\n                return { ...prevColumns, [columnId]: updatedColumn };\n            });\n        }\n    };\n\n    const addColumn = () => {\n        const columnName = prompt(\"Enter new column name:\");\n        if (columnName) {\n            const newColumnId = `column_${Date.now()}`;\n            setColumns((prevColumns) => ({\n                ...prevColumns,\n                [newColumnId]: { name: columnName, items: [] },\n            }));\n        }\n    };\n\n    const deleteColumn = (columnId) => {\n        setColumns((prevColumns) => {\n            const newColumns = { ...prevColumns };\n            delete newColumns[columnId];\n            return newColumns;\n        });\n    };\n\n    // New function to delete a specific task\n    const deleteTask = (columnId, taskId) => {\n        setColumns((prevColumns) => {\n            const updatedColumn = {\n                ...prevColumns[columnId],\n                items: prevColumns[columnId].items.filter((task) => task.id !== taskId),\n            };\n            return { ...prevColumns, [columnId]: updatedColumn };\n        });\n    };\n\n    // Pagination logic\n    const [currentPage, setCurrentPage] = useState(0);\n    const columnsPerPage = 4;\n    const totalPages = Math.ceil(Object.keys(columns).length / columnsPerPage);\n\n    const handleNextPage = () => {\n        if (currentPage < totalPages - 1) {\n            setCurrentPage(currentPage + 1);\n        }\n    };\n\n    const handlePreviousPage = () => {\n        if (currentPage > 0) {\n            setCurrentPage(currentPage - 1);\n        }\n    };\n\n    // Get the columns to display on the current page\n    const displayedColumns = Object.entries(columns).slice(currentPage * columnsPerPage, (currentPage + 1) * columnsPerPage);\n\n    return (\n        <DndProvider backend={HTML5Backend}>\n            <div className=\"App\">\n                <h1>Kanban Board</h1>\n                <button onClick={addColumn}>Add Column</button>\n\n                <div className=\"kanban-board\" style={{ overflowX: 'auto' }}>\n                    {displayedColumns.map(([columnId, column]) => (\n                        <Column \n                            key={columnId} \n                            columnId={columnId} \n                            column={column} \n                            moveTask={moveTask} \n                            addTask={addTask} \n                            deleteColumn={deleteColumn} \n                            deleteTask={deleteTask} \n                        />\n                    ))}\n                </div>\n\n                <div className=\"pagination\">\n                    <button onClick={handlePreviousPage} disabled={currentPage === 0}>Previous</button>\n                    <button onClick={handleNextPage} disabled={currentPage >= totalPages - 1}>Next</button>\n                </div>\n            </div>\n        </DndProvider>\n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
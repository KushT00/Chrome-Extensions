{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\OneDrive\\\\Documents\\\\Extensions\\\\kanban-board\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport Column from './Column';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [columns, setColumns] = useState(() => {\n    const savedColumns = localStorage.getItem('columns');\n    return savedColumns ? JSON.parse(savedColumns) : {\n      todo: {\n        name: 'To Do',\n        items: [{\n          id: '1',\n          content: 'Task 1',\n          color: '#FFCDD2'\n        }, {\n          id: '2',\n          content: 'Task 2',\n          color: '#BBDEFB'\n        }]\n      },\n      ongoing: {\n        name: 'Ongoing',\n        items: []\n      },\n      completed: {\n        name: 'Completed',\n        items: []\n      }\n    };\n  });\n  const colors = ['#FFCDD2', '#F8BBD0', '#E1BEE7', '#D1C4E9', '#C5CAE9', '#BBDEFB', '#B3E5FC', '#B2EBF2', '#B2DFDB', '#C8E6C9', '#DCEDC8', '#F0F4C3', '#FFF9C4'];\n\n  // Save columns to local storage when columns state changes\n  useEffect(() => {\n    localStorage.setItem('columns', JSON.stringify(columns));\n  }, [columns]);\n  const moveTask = (taskId, sourceColumnId, destinationColumnId, destinationIndex) => {\n    const sourceColumn = columns[sourceColumnId];\n    const destColumn = columns[destinationColumnId];\n    const taskToMove = sourceColumn.items.find(item => item.id === taskId);\n    const updatedSourceItems = sourceColumn.items.filter(item => item.id !== taskId);\n    if (sourceColumnId === destinationColumnId) {\n      const reorderedItems = [...updatedSourceItems];\n      reorderedItems.splice(destinationIndex, 0, taskToMove);\n      setColumns(prevColumns => ({\n        ...prevColumns,\n        [sourceColumnId]: {\n          ...sourceColumn,\n          items: reorderedItems\n        }\n      }));\n    } else {\n      const updatedDestItems = [...destColumn.items, taskToMove];\n      setColumns(prevColumns => ({\n        ...prevColumns,\n        [sourceColumnId]: {\n          ...sourceColumn,\n          items: updatedSourceItems\n        },\n        [destinationColumnId]: {\n          ...destColumn,\n          items: updatedDestItems\n        }\n      }));\n    }\n  };\n  const addTask = columnId => {\n    const taskContent = prompt(\"Enter task content:\");\n    if (taskContent) {\n      const colorIndex = Math.floor(Math.random() * colors.length); // Pick a random color\n      const newTask = {\n        id: Date.now().toString(),\n        content: taskContent,\n        color: colors[colorIndex]\n      };\n      setColumns(prevColumns => {\n        const updatedColumn = {\n          ...prevColumns[columnId],\n          items: [...prevColumns[columnId].items, newTask]\n        };\n        return {\n          ...prevColumns,\n          [columnId]: updatedColumn\n        };\n      });\n    }\n  };\n  const addColumn = () => {\n    const columnName = prompt(\"Enter new column name:\");\n    if (columnName) {\n      const newColumnId = `column_${Date.now()}`;\n      setColumns(prevColumns => ({\n        ...prevColumns,\n        [newColumnId]: {\n          name: columnName,\n          items: []\n        }\n      }));\n    }\n  };\n  const deleteColumn = columnId => {\n    setColumns(prevColumns => {\n      const newColumns = {\n        ...prevColumns\n      };\n      delete newColumns[columnId];\n      return newColumns;\n    });\n  };\n  const deleteTask = (columnId, taskId) => {\n    setColumns(prevColumns => {\n      const updatedColumn = {\n        ...prevColumns[columnId],\n        items: prevColumns[columnId].items.filter(task => task.id !== taskId)\n      };\n      return {\n        ...prevColumns,\n        [columnId]: updatedColumn\n      };\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(DndProvider, {\n    backend: HTML5Backend,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addColumn,\n        children: \"Add Column\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"kanban-board-wrapper\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"kanban-board\",\n          children: Object.entries(columns).map(([columnId, column]) => /*#__PURE__*/_jsxDEV(Column, {\n            columnId: columnId,\n            column: column,\n            moveTask: moveTask,\n            addTask: addTask,\n            deleteColumn: deleteColumn,\n            deleteTask: deleteTask\n          }, columnId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 111,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"u7dMEbV0OdkUqk+0Aq032VeaeTg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","DndProvider","HTML5Backend","Column","jsxDEV","_jsxDEV","App","_s","columns","setColumns","savedColumns","localStorage","getItem","JSON","parse","todo","name","items","id","content","color","ongoing","completed","colors","setItem","stringify","moveTask","taskId","sourceColumnId","destinationColumnId","destinationIndex","sourceColumn","destColumn","taskToMove","find","item","updatedSourceItems","filter","reorderedItems","splice","prevColumns","updatedDestItems","addTask","columnId","taskContent","prompt","colorIndex","Math","floor","random","length","newTask","Date","now","toString","updatedColumn","addColumn","columnName","newColumnId","deleteColumn","newColumns","deleteTask","task","backend","children","className","onClick","fileName","_jsxFileName","lineNumber","columnNumber","Object","entries","map","column","_c","$RefreshReg$"],"sources":["C:/Users/Dell/OneDrive/Documents/Extensions/kanban-board/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport Column from './Column';\nimport './styles.css';\n\nfunction App() {\n    const [columns, setColumns] = useState(() => {\n        const savedColumns = localStorage.getItem('columns');\n        return savedColumns ? JSON.parse(savedColumns) : {\n            todo: {\n                name: 'To Do',\n                items: [{ id: '1', content: 'Task 1', color: '#FFCDD2' }, { id: '2', content: 'Task 2', color: '#BBDEFB' }],\n            },\n            ongoing: {\n                name: 'Ongoing',\n                items: [],\n            },\n            completed: {\n                name: 'Completed',\n                items: [],\n            },\n        };\n    });\n\n    const colors = ['#FFCDD2', '#F8BBD0', '#E1BEE7', '#D1C4E9', '#C5CAE9', '#BBDEFB', '#B3E5FC', '#B2EBF2', '#B2DFDB', '#C8E6C9', '#DCEDC8', '#F0F4C3', '#FFF9C4'];\n\n    // Save columns to local storage when columns state changes\n    useEffect(() => {\n        localStorage.setItem('columns', JSON.stringify(columns));\n    }, [columns]);\n\n    const moveTask = (taskId, sourceColumnId, destinationColumnId, destinationIndex) => {\n        const sourceColumn = columns[sourceColumnId];\n        const destColumn = columns[destinationColumnId];\n\n        const taskToMove = sourceColumn.items.find((item) => item.id === taskId);\n        const updatedSourceItems = sourceColumn.items.filter((item) => item.id !== taskId);\n\n        if (sourceColumnId === destinationColumnId) {\n            const reorderedItems = [...updatedSourceItems];\n            reorderedItems.splice(destinationIndex, 0, taskToMove);\n            setColumns((prevColumns) => ({\n                ...prevColumns,\n                [sourceColumnId]: {\n                    ...sourceColumn,\n                    items: reorderedItems,\n                },\n            }));\n        } else {\n            const updatedDestItems = [...destColumn.items, taskToMove];\n            setColumns((prevColumns) => ({\n                ...prevColumns,\n                [sourceColumnId]: {\n                    ...sourceColumn,\n                    items: updatedSourceItems,\n                },\n                [destinationColumnId]: {\n                    ...destColumn,\n                    items: updatedDestItems,\n                },\n            }));\n        }\n    };\n\n    const addTask = (columnId) => {\n        const taskContent = prompt(\"Enter task content:\");\n        if (taskContent) {\n            const colorIndex = Math.floor(Math.random() * colors.length);  // Pick a random color\n            const newTask = { id: Date.now().toString(), content: taskContent, color: colors[colorIndex] };\n            setColumns((prevColumns) => {\n                const updatedColumn = {\n                    ...prevColumns[columnId],\n                    items: [...prevColumns[columnId].items, newTask],\n                };\n                return { ...prevColumns, [columnId]: updatedColumn };\n            });\n        }\n    };\n\n    const addColumn = () => {\n        const columnName = prompt(\"Enter new column name:\");\n        if (columnName) {\n            const newColumnId = `column_${Date.now()}`;\n            setColumns((prevColumns) => ({\n                ...prevColumns,\n                [newColumnId]: { name: columnName, items: [] },\n            }));\n        }\n    };\n\n    const deleteColumn = (columnId) => {\n        setColumns((prevColumns) => {\n            const newColumns = { ...prevColumns };\n            delete newColumns[columnId];\n            return newColumns;\n        });\n    };\n\n    const deleteTask = (columnId, taskId) => {\n        setColumns((prevColumns) => {\n            const updatedColumn = {\n                ...prevColumns[columnId],\n                items: prevColumns[columnId].items.filter((task) => task.id !== taskId),\n            };\n            return { ...prevColumns, [columnId]: updatedColumn };\n        });\n    };\n\n    return (\n        <DndProvider backend={HTML5Backend}>\n            <div className=\"App\">\n               \n                <button onClick={addColumn}>Add Column</button>\n\n                <div className=\"kanban-board-wrapper\">\n                    <div className=\"kanban-board\">\n                        {Object.entries(columns).map(([columnId, column]) => (\n                            <Column \n                                key={columnId} \n                                columnId={columnId} \n                                column={column} \n                                moveTask={moveTask} \n                                addTask={addTask} \n                                deleteColumn={deleteColumn} \n                                deleteTask={deleteTask} \n                            />\n                        ))}\n                    </div>\n                </div>\n            </div>\n        </DndProvider>\n    );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}